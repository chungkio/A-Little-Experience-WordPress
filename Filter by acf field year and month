<?php
function enqueue_ajax_script() {
    // Enqueue your custom JavaScript file
    wp_enqueue_script('event-filter-ajax', get_template_directory_uri() . '/assets/js/ajax-filter.js', array('jquery'), null, true);

    // Localize the script with AJAX URL
    wp_localize_script('event-filter-ajax', 'ajax_params', array(
        'ajax_url' => admin_url('admin-ajax.php')
    ));

     // add CSS
     if (is_page_template('templates/events.php')) {
        wp_enqueue_style('events-style', get_template_directory_uri() . '/assets/css/events-style.css', null, wp_get_theme()->get('Version'), 'all');
    }

    if (is_singular('events') || is_post_type_archive('events')) {
        // Enqueue the CSS file
        wp_enqueue_style('events-css', get_template_directory_uri() . '/assets/css/events-single.css', array(), wp_get_theme()->get('Version'));
    }
}
add_action('wp_enqueue_scripts', 'enqueue_ajax_script');

function eventFormatDate($date_str) {
    // Convert the string to a DateTime object
    $date_obj = DateTime::createFromFormat('d/m/Y', $date_str);

    // Format the DateTime object to the desired format
    $formatted_date = $date_obj->format('d M Y');
    return $formatted_date;
}

function filter_events_by_empty() {
    // Initialize an empty array for filtered posts
    $filtered_posts = [];

    // Set up the WP_Query args
    $args = array(
        'post_type' => 'events',
        'post_status' => 'publish',
        'posts_per_page' => -1,  // Retrieve all posts (will handle pagination later)
        'lang' => pll_current_language()
    );
    // Query the events
    $query = new WP_Query($args);

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();

            // Get the 'event__date' field (assuming it's in DD/MM/YYYY format)
            $event_date = get_field('event__date');
            $date_from = isset($event_date['form']) ? $event_date['form'] : '';
            $date_to = isset($event_date['to']) ? $event_date['to'] : '';

            // Convert date strings to DateTime objects for comparison
            $date_from_parts = $date_from ? explode('/', $date_from) : [];
            $date_to_parts = $date_to ? explode('/', $date_to) : [];

            // Check if at least one date is provided
            if ((count($date_from_parts) == 3) || (count($date_to_parts) == 3)) {
                // Convert to DateTime objects if valid
                $date_from_obj = $date_from ? DateTime::createFromFormat('d/m/Y', $date_from) : null;
                $date_to_obj = $date_to ? DateTime::createFromFormat('d/m/Y', $date_to) : null;

                // If only $date_from is provided, set $date_to to the same value
                if ($date_from_obj && !$date_to_obj) {
                    $date_to_obj = $date_from_obj;  // Assume it ends on the same date
                }

                // If only $date_to is provided, set $date_from to the same value
                if (!$date_from_obj && $date_to_obj) {
                    $date_from_obj = $date_to_obj;  // Assume it starts on the same date
                }

                // Store post ID along with its dates for sorting later
                $filtered_posts[] = array(
                    'post_id' => get_the_ID(),
                    'date_from' => $date_from_obj,
                    'date_to' => $date_to_obj,
                );
            }

        }
        wp_reset_postdata();  // Reset the query
    }
    usort($filtered_posts, function ($a, $b) {
        // Compare by date_from first, then date_to
        if ($a['date_from'] == $b['date_from']) {
            return $b['date_to'] <=> $a['date_to'];  // Sort by date_to if date_from is the same
        }
        return $b['date_from'] <=> $a['date_from'];  // Sort by date_from descending
    });

    $event_ids = [];
    // Loop through the events and get the post IDs
    foreach ($filtered_posts as $event) {
        $event_ids[] = $event['post_id'];
    }

    return array_unique($event_ids);
}

function filter_events_by_year_and_month($selected_year, $selected_month) {
    $filtered_posts = [];
    $args = array(
        'post_type' => 'events',
        'post_status' => 'publish',
        'posts_per_page' => -1, // Get all posts
        'lang' => pll_current_language(),
    );

    $query = new WP_Query($args);

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();

            // Get event date fields (expected format: DD/MM/YYYY)
            $event_date = get_field('event__date');
            $date_from = isset($event_date['form']) ? $event_date['form'] : '';
            $date_to = isset($event_date['to']) ? $event_date['to'] : '';

            // Convert to DateTime objects
            $date_from_obj = $date_from ? DateTime::createFromFormat('d/m/Y', $date_from) : null;
            $date_to_obj = $date_to ? DateTime::createFromFormat('d/m/Y', $date_to) : null;

            // ðŸŸ¢ Handle missing start or end date (assume single-day event)
            if ($date_from_obj && !$date_to_obj) {
                $date_to_obj = clone $date_from_obj;
            }
            if (!$date_from_obj && $date_to_obj) {
                $date_from_obj = clone $date_to_obj;
            }

            // ðŸ”´ Ignore events that have no valid date
            if (!$date_from_obj || !$date_to_obj) {
                continue;
            }

            // Extract year and month for filtering
            $event_year_from = $date_from_obj->format('Y');
            $event_month_from = $date_from_obj->format('m');
            $event_year_to = $date_to_obj->format('Y');
            $event_month_to = $date_to_obj->format('m');

            // ðŸŸ¢ Filtering by selected year and month
            if ($selected_year && $selected_month) {
                if (
                    // Case 1: Event starts in the selected month & year
                    ($event_year_from == $selected_year && $event_month_from == $selected_month) ||

                    // Case 2: Event ends in the selected month & year
                    ($event_year_to == $selected_year && $event_month_to == $selected_month) ||

                    // Case 3: Event spans across the selected month (starts before, ends after)
                    ($event_year_from < $selected_year && $event_year_to > $selected_year) ||

                    // Case 4: Event starts and ends within the same year but spans the selected month
                    ($event_year_from == $selected_year && $event_year_to == $selected_year &&
                        $event_month_from <= $selected_month && $event_month_to >= $selected_month) ||

                    // Case 5: Event starts in a previous year but ends in the selected month & year
                    ($event_year_from < $selected_year && $event_year_to == $selected_year && $event_month_to >= $selected_month) ||

                    // Case 6: Event starts in the selected month & year but ends in the next year
                    ($event_year_from == $selected_year && $event_month_from <= $selected_month && $event_year_to > $selected_year) ||

                    // ðŸŸ¢ Case 7: Special handling for December & January (cross-year events)
                    ($selected_month == 1 && $event_year_to == $selected_year && $event_month_to == 1 && $event_year_from == ($selected_year - 1) && $event_month_from == 12) ||
                    ($selected_month == 12 && $event_year_from == $selected_year && $event_month_from == 12 && $event_year_to == ($selected_year + 1) && $event_month_to == 1)
                ) {
                    $filtered_posts[] = array(
                        'post_id' => get_the_ID(),
                        'date_from' => $date_from_obj,
                        'date_to' => $date_to_obj,
                    );
                }
            } elseif ($selected_year && !$selected_month) {
                // ðŸŸ¢ If only the year is selected, include all events within that year
                if ($event_year_from == $selected_year || $event_year_to == $selected_year) {
                    $filtered_posts[] = array(
                        'post_id' => get_the_ID(),
                        'date_from' => $date_from_obj,
                        'date_to' => $date_to_obj,
                    );
                }
            } elseif (!$selected_year && $selected_month) {
                // ðŸŸ¢ If only the month is selected (without a specific year), include events in that month regardless of the year
                if (
                    // âœ… Case 1: Event starts in the selected month (any year)
                    ($event_month_from == $selected_month) ||

                    // âœ… Case 2: Event ends in the selected month (any year)
                    ($event_month_to == $selected_month) ||

                    // âœ… Case 3: Event spans across the selected month (starts before, ends after)
                    ($event_month_from < $selected_month && $event_month_to > $selected_month) ||

                    // âœ… Case 4: Event starts before and ends in the selected month
                    ($event_month_from < $selected_month && $event_month_to >= $selected_month) ||

                    // âœ… Case 5: Event starts in the selected month and ends after it
                    ($event_month_from <= $selected_month && $event_month_to > $selected_month) ||

                    // âœ… Case 6: Handle events spanning across different years
                    // This checks if an event starts in one year and ends in another
                    (($event_month_from > $event_month_to) && ($selected_month >= $event_month_from || $selected_month <= $event_month_to))
                ) {
                    $filtered_posts[] = array(
                        'post_id' => get_the_ID(),
                        'date_from' => $date_from_obj,
                        'date_to' => $date_to_obj,
                    );
                }
            }
        }
        wp_reset_postdata();
    }

    // ðŸŸ¢ Sort events by start date (newest first)
    usort($filtered_posts, function ($a, $b) {
        return $b['date_from'] <=> $a['date_from'];
    });

    // ðŸŸ¢ Return unique post IDs
    return array_unique(array_column($filtered_posts, 'post_id'));
}

function get_filtered_posts_with_pagination($filtered_posts, $paged) {
    $posts_per_page = 9;

    $filtered_posts_query = new WP_Query(array(
        'post_type' => 'events',
        'posts_per_page' => $posts_per_page,
        'paged' => $paged,
        'post__in' => $filtered_posts,
        'orderby' => 'post__in',
    ));

    return $filtered_posts_query;
}

function display_filtered_events($filtered_posts_query) {
    if ($filtered_posts_query->have_posts()) {
        echo '<div class="events-list">';
        while ($filtered_posts_query->have_posts()) {
            $filtered_posts_query->the_post();
            get_template_part('template-parts/events/items', null, array(
                'ids' => get_the_ID()
            ));
        }
        echo '</div>';
    } else {
        echo '<p>'.pll__('No events found.').'</p>';
    }
}


function display_pagination($filtered_posts_query, $paged) {
    $total_pages = $filtered_posts_query->max_num_pages;

    if ($total_pages > 1) {
        echo '<div class="event__pagination" data-aos="fade-up">';

        // Generate pagination links
        $pagination_links = paginate_links(array(
            'total' => $total_pages,
            'current' => $paged,
            'prev_text' => '<svg width="14" height="12" viewBox="0 0 14 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6.17703 10.75L1.30029 6L6.17703 1.25" stroke="#2957A4" stroke-width="1.4" stroke-linejoin="round"/>
                            <path d="M1.84277 6.09667L12.7005 6.09667" stroke="#2957A4" stroke-width="1.4" stroke-linecap="square"/>
                            </svg>',
            'next_text' => '<svg width="14" height="12" viewBox="0 0 14 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M7.82346 1.25L12.7002 6L7.82346 10.75" stroke="#2957A4" stroke-width="1.4" stroke-linejoin="round"/>
                            <path d="M12.1577 5.90333H1.29999" stroke="#2957A4" stroke-width="1.4" stroke-linecap="square"/>
                            </svg>',
            'type' => 'array',  // Return the pagination links as an array
        ));

        if ($pagination_links) {
            foreach ($pagination_links as $link) {
                // Extract the page number
                preg_match('/page\/(\d+)\//', $link, $matches);
                $page_number = isset($matches[1]) ? $matches[1] : '';

                // Add data-page attribute to each pagination link
                if ($page_number) {
                    $link_with_data_page = preg_replace('/href=["\']([^"\']+)["\']/', 'href="$1" data-page="' . $page_number . '"', $link);
                } else {
                    $link_with_data_page = $link; // Handle the case where the page number is not found
                }

                // Output the updated link
                echo '<span class="pagination-link">' . $link_with_data_page . '</span>';
            }
        }

        echo '</div>';
    }
}


add_action('wp_ajax_filter_events', 'filter_events_ajax');  // For logged-in users
add_action('wp_ajax_nopriv_filter_events', 'filter_events_ajax');  // For non-logged-in users

function filter_events_ajax() {
    // Sanitize and retrieve data from $_GET
    $selected_year = isset($_GET['year']) ? sanitize_text_field($_GET['year']) : '';
    $selected_month = isset($_GET['month']) ? sanitize_text_field($_GET['month']) : '';
    $paged = isset($_GET['paged']) ? intval($_GET['paged']) : 1;  // Default to page 1 if not set

    $filtered_posts_query = null;

    // Filter posts based on year and month
    if(empty($selected_year) && empty($selected_month)) {
        $filtered_posts = filter_events_by_empty();
    } else {
        $filtered_posts = filter_events_by_year_and_month($selected_year, $selected_month);
        // Query the filtered posts with pagination
    }

    $filtered_posts_query = get_filtered_posts_with_pagination($filtered_posts, $paged);



    // Start output buffering to capture the HTML content
    ob_start();

    // Display filtered events
    if(!empty($filtered_posts)) {
        display_filtered_events($filtered_posts_query);
    }

    // Capture the content of filtered events
    $events_content = ob_get_clean();

    // Start output buffering again for pagination
    ob_start();

    // Display pagination
    if(!empty($filtered_posts)) {
        display_pagination($filtered_posts_query, $paged);
    }

    // Capture the pagination content
    $pagination_content = ob_get_clean();

    $total = count($filtered_posts);
    $message = sprintf(
        pll__( 'Showing %d result' ),
        $total
    );

    // Return the filtered events and pagination content as a JSON response
    wp_send_json_success(array(
        'total' => $message,
        'events_content' => !empty($events_content) ? $events_content : '<p>'.pll__('No events found.').'</p>',
        'pagination_content' => !empty($pagination_content) ? $pagination_content : false,
    ));

    wp_reset_postdata();  // Reset the query
    die();  // End the request
}


//File template filter
<?php
// Initialize arrays to hold years and months
$years_array = array();  // This will store unique years
$months_array = array(); // This will store months grouped by year

// Query all the events to retrieve the year and month data from 'event__date.form' and 'event__date.to'
$query = new WP_Query(array(
    'post_type' => 'events',  // Specify post type is 'events'
    'posts_per_page' => -1,   // Get all posts
    'fields' => 'ids',        // Only retrieve the IDs of the posts
));

if ($query->have_posts()) {
    while ($query->have_posts()) : $query->the_post();
        // Get the 'event__date' field that contains both start and end dates
        $event_date = get_field('event__date');
        // Extract 'form' (start date) and 'to' (end date)
        $date_from = isset($event_date['form']) ? DateTime::createFromFormat('d/m/Y', $event_date['form']) : null;
        $date_to = isset($event_date['to']) ? DateTime::createFromFormat('d/m/Y', $event_date['to']) : null;

        // If there's a start date, extract the year and month
        if ($date_from) {
            $year_from = $date_from->format('Y');  // Extract the year from start date
            $month_from = $date_from->format('n'); // Extract the month from start date
            $years_array[] = $year_from; // Add the year to the years array
            // Group months by year
            if (!isset($months_array[$year_from])) {
                $months_array[$year_from] = array();
            }
            if (!in_array($month_from, $months_array[$year_from])) {
                $months_array[$year_from][] = $month_from;  // Add the month if it's not already in the list
            }
        }

        // If there's an end date, extract the year and month
        if ($date_to) {
            $year_to = $date_to->format('Y');  // Extract the year from end date
            $month_to = $date_to->format('n'); // Extract the month from end date
            $years_array[] = $year_to;      // Add the year to the years array
            // Group months by year
            if (!isset($months_array[$year_to])) {
                $months_array[$year_to] = array();
            }
            if (!in_array($month_to, $months_array[$year_to])) {
                $months_array[$year_to][] = $month_to;  // Add the month if it's not already in the list
            }
        }
    endwhile;
    // Reset query
    wp_reset_postdata();
}

// Remove duplicate years and sort them in ascending order
$years_array = array_unique($years_array); // Remove duplicates
rsort($years_array);  // Sort the years in ascending order

$all_year = pll__('All Years');
$all_month = pll__('All Months');

?>

<div class="event__filter-form">
    <div class="filter__item year">
        <div class="value"><?= $all_year; ?></div>
        <div class="list year" style="display: none;">
            <ul id="year" class="list--item-filter">
                <li data-value="" class="selected">
                    <a href="javascript:void(0)" class="more-link">
                        <?= $all_year; ?>
                    </a>
                </li>
                <?php
                // Display all unique years in the dropdown
                foreach ($years_array as $year) {
                    echo '<li data-value="' . $year . '">' .
                    '<a href="javascript:void(0)" class="more-link">'. $year . '</a></li>';
                }
                ?>
            </ul>
        </div>
    </div>

    <div class="filter__item month">
        <div class="value"><?= $all_month; ?></div>
        <div class="list month" style="display: none;">
            <ul id="month" class="list--item-filter">
                <li data-value="" class="selected">
                    <a href="javascript:void(0)" class="more-link">
                        <?= $all_month; ?>
                    </a>
                </li>
                <?php

                // If no year is selected, display all months for all years
                $months = range(1, 12);  // All months from 1 to 12
                foreach ($months as $month) {
                    echo '<li data-value="' . $month . '">' .
                    '<a href="javascript:void(0)" class="more-link">'.date('F', mktime(0, 0, 0, $month, 1)) . '</a></li>';
                }
                ?>
            </ul>
        </div>
    </div>

</div>



//File item
<?php
    $ids = isset($args['ids']) ? $args['ids'] : null;

    if($ids):
        $location = get_field('event__location', $ids);
        $contact_persion = get_field('event__persion', $ids);

        $event_date = get_field('event__date', $ids);
        $date_from = isset($event_date['form']) ? $event_date['form'] : '';
        $date_to = isset($event_date['to']) ? $event_date['to'] : '';
        $date_calendar = '';
        if($date_from && $date_to) {
            $date_calendar = eventFormatDate($date_from).' - '.eventFormatDate($date_to);
        }

        if($date_from && !$date_to) {
            $date_calendar = eventFormatDate($date_from);
        }

        if(!$date_from && $date_to) {
            $date_calendar = eventFormatDate($date_to);
        }
?>
    <div class="card__item" data-aos="fade-up">
        <div class="card__item--wrapper">
            <div class="card__image">
                <?php if (get_the_post_thumbnail($ids, 'full')): ?>
                    <a href="<?= get_permalink($ids); ?>">
                        <?=  get_the_post_thumbnail($ids, 'full'); ?>
                    </a>
                <?php endif; ?>
            </div>
            <div class="card__title">
                <a href="<?= get_permalink($ids); ?>" class="title--text">
                    <?= get_the_title($ids); ?>
                </a>
            </div>
            <div class="card__info">
                <?php if($date_from || $date_to): ?>
                    <div class="event__info calendar">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21 10H3M16 2V6M8 2V6M7.8 22H16.2C17.8802 22 18.7202 22 19.362 21.673C19.9265 21.3854 20.3854 20.9265 20.673 20.362C21 19.7202 21 18.8802 21 17.2V8.8C21 7.11984 21 6.27976 20.673 5.63803C20.3854 5.07354 19.9265 4.6146 19.362 4.32698C18.7202 4 17.8802 4 16.2 4H7.8C6.11984 4 5.27976 4 4.63803 4.32698C4.07354 4.6146 3.6146 5.07354 3.32698 5.63803C3 6.27976 3 7.11984 3 8.8V17.2C3 18.8802 3 19.7202 3.32698 20.362C3.6146 20.9265 4.07354 21.3854 4.63803 21.673C5.27976 22 6.11984 22 7.8 22Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <div class="text">
                            <?= $date_calendar; ?>
                        </div>
                    </div>
                <?php endif; ?>
                <?php if($location): ?>
                    <div class="event__info location">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 22C16 18 20 14.4183 20 10C20 5.58172 16.4183 2 12 2C7.58172 2 4 5.58172 4 10C4 14.4183 8 18 12 22Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <a href="<?= $location['url']; ?>" class="text" target="<?= $location['target'] ?>">
                            <?= $location['title']; ?>
                        </a>
                    </div>
                <?php endif; ?>
                <?php if($contact_persion): 
                    foreach($contact_persion as $persion):
                    ?>
                        <div class="event__info contact">
                            <svg width="20" height="22" viewBox="0 0 20 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M13.7 10.7172C14.6839 9.94783 15.4031 8.89061 15.7575 7.69296C16.1118 6.49531 16.0836 5.21693 15.6767 4.03609C15.2698 2.85526 14.5046 1.83083 13.4877 1.10566C12.4708 0.380484 11.253 -0.00927734 10.004 -0.00927734C8.75503 -0.00927734 7.53719 0.380484 6.52031 1.10566C5.50342 1.83083 4.73819 2.85526 4.33131 4.03609C3.92443 5.21693 3.89619 6.49531 4.25053 7.69296C4.60487 8.89061 5.32413 9.94783 6.308 10.7172C4.44917 11.4568 2.85467 12.7365 1.73027 14.3912C0.605868 16.0459 0.00318499 17.9996 0 20.0002V21.0002C0 21.2654 0.105357 21.5198 0.292893 21.7073C0.48043 21.8948 0.734784 22.0002 1 22.0002H19C19.2652 22.0002 19.5196 21.8948 19.7071 21.7073C19.8946 21.5198 20 21.2654 20 21.0002V20.0002C19.9975 18.0006 19.3959 16.0475 18.273 14.3929C17.1501 12.7383 15.5573 11.4581 13.7 10.7172ZM6 6.0002C6 5.20907 6.2346 4.43572 6.67412 3.77792C7.11365 3.12012 7.73836 2.60743 8.46927 2.30468C9.20017 2.00193 10.0044 1.92272 10.7804 2.07706C11.5563 2.2314 12.269 2.61236 12.8284 3.17177C13.3878 3.73118 13.7688 4.44391 13.9231 5.21984C14.0775 5.99576 13.9983 6.80003 13.6955 7.53093C13.3928 8.26184 12.8801 8.88655 12.2223 9.32608C11.5645 9.7656 10.7911 10.0002 10 10.0002C8.93913 10.0002 7.92172 9.57877 7.17157 8.82863C6.42143 8.07848 6 7.06107 6 6.0002ZM2 20.0002C2 17.8785 2.84285 15.8436 4.34315 14.3433C5.84344 12.8431 7.87827 12.0002 10 12.0002C12.1217 12.0002 14.1566 12.8431 15.6569 14.3433C17.1571 15.8436 18 17.8785 18 20.0002H2Z" fill="#2957A4"/>
                            </svg>
                            <a href="<?= $persion['email'] ? 'mailto:'.$persion['email'] : 'javascript:void(0)' ?>" class="text">
                                <?= $persion['name']; ?>
                            </a>
                        </div>
                <?php
                    endforeach;
                endif; ?>
            </div>
        </div>
</div>
<?php endif; ?>



// Template event
<?php
/**
 * Template Name: Events
 * Description: Page template for events
 */
get_header();
// Get the current language using Polylang
$current_language = pll_current_language();

// Define the ACF field name based on the current language
$field_name = 'event__settings_' . $current_language;

// Retrieve the ACF field value
$event_settings = get_field($field_name, 'options');

$event_ids = filter_events_by_empty();  // Filter events by year and month
$total = count($event_ids);
$message = sprintf(
    pll__( 'Showing %d result' ),
    $total
);
?>
<div class="event__banner">
    <div class="container">
        <h1 class="event__heading" data-aos="fade-up"><?= get_the_title(); ?></h1>
    </div>
    <?php
        $featured_image = null;
        if (has_post_thumbnail()) {
            // Get the featured image for the current page
            $featured_image = get_the_post_thumbnail(get_the_ID(), 'full'); // 'full' can be replaced with other sizes like
        }
        if($featured_image): ?>
            <div class="image" data-aos="fade-up">
                <?= $featured_image; ?>
            </div>
        <?php endif; ?>
</div>

<div class="events__list--box">
    <div class="container">
        <div class="event__filter-top" data-aos="fade-up">
            <?php
                // Display the paginated posts
                get_template_part('template-parts/events/filter');  // Include the filter form
            ?>
            <?php
                if ($event_settings && isset($event_settings['event_schedule'])) {
                    $event_schedule = $event_settings['event_schedule'];  // Event schedule link
            ?>
                    <div class="event__schedule">
                        <a href="<?=  esc_url($event_schedule['url']); ?>" target="<?=  $event_schedule['target']; ?>" class="schedule"><?=  $event_schedule['title']; ?></a>
                    </div>
            <?php
                }
            ?>
        </div>
        <div class="events__list--wrapper">
            <div class="event__list--total" data-aos="fade-up">
                <?= $message ?>
            </div>
            <div class="events__list--event">
                <?php
                    $event_posts_query = get_filtered_posts_with_pagination($event_ids, 1);

                    display_filtered_events($event_posts_query);

                    display_pagination($event_posts_query, 1);
                ?>
            </div>
        </div>
    </div>
</div>
<?php get_footer(); ?>


//jQuery
jQuery(document).ready(function($) {
    // When clicking anywhere outside the filter form
    $(document).click(function(event) {
        // Check if the click is outside the filter form
        if (!$(event.target).closest('.event__filter-form').length) {
            // Close any open filter lists and remove the active class
            $('.event__filter-form .filter__item').removeClass('active');
            $('.event__filter-form .filter__item .list').slideUp();
        }
    });

    $('.event__filter-form .filter__item .value').click(function(e) {
        e.stopPropagation();

        // Check if the clicked item is already active
        var $parentItem = $(this).parent();

        if ($parentItem.hasClass('active')) {
            // If it's already active, remove the active class and slide up the list
            $parentItem.removeClass('active');
            $(this).next().slideUp();
        } else {
            // If it's not active, toggle the active class and slide down the list
            $('.event__filter-form .filter__item').removeClass('active');
            $('.event__filter-form .filter__item .list').slideUp();
            $parentItem.addClass('active');
            $(this).next().slideDown();
        }
    });

    // On form submit
    $('.list--item-filter li').click(function(e){
        e.stopPropagation();

        // Get the selected year, month, and reset the page number to 1
        $(this).parent().find('li').removeClass('selected');
        $(this).addClass('selected');

        //Set Value
        var year = $('#year li.selected').data('value');
        var month = $('#month li.selected').data('value');
        var paged = 1; // Always start with page 1 when a new filter is applied

        // Change text
        $(this).parents('.filter__item').find('.value').html($(this).find('a').text());
        $('.event__filter-form .filter__item').removeClass('active');
        $('.event__filter-form .filter__item .list').slideUp();

        // Prepare the AJAX request
        $.ajax({
            url: ajax_params.ajax_url,  // Use the localized `ajaxurl`
            type: 'GET',
            data: {
                action: 'filter_events', // AJAX action hook
                year: year,
                month: month,
                paged: paged  // Always pass 1 when submitting the filter form
            },
            beforeSend: function() {
            },
            success: function(response) {
                if (response.success) {
                    //Update total
                    $('.event__list--total').html(response.data.total);

                    // Update the events list
                    $('.events__list--event').html(response.data.events_content)

                    // Update the pagination links
                    if(response.data.pagination_content) {
                        $('.events__list--event').append(response.data.pagination_content);
                    }
                }
            }
        });
    });

    // On pagination click (both "Next" and "Previous" buttons)
    $(document).on('click', '.event__pagination a', function(e){
        e.preventDefault(); // Prevent the default action

        //Set Value
        var year = $('#year li.selected').data('value');
        var month = $('#month li.selected').data('value');
        var paged = $(this).data('page');

        // Prepare the AJAX request
        $.ajax({
            url: ajax_params.ajax_url,  // Use the localized `ajaxurl`
            type: 'GET',
            data: {
                action: 'filter_events', // AJAX action hook
                year: year,
                month: month,
                paged: paged  // Pass the selected page number
            },
            beforeSend: function() {
            },
            success: function(response) {
                if (response.success) {
                    //Update total
                    $('.event__list--total').html(response.data.total);

                    // Update the events list
                    $('.events__list--event').html(response.data.events_content)

                    // Update the pagination links
                    if(response.data.pagination_content) {
                        $('.events__list--event').append(response.data.pagination_content);
                    }
                }
            }
        });
    });
});
