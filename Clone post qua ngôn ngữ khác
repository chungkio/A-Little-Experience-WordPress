<?php
// Hook vào admin menu để tạo trang quản lý
add_action('admin_menu', 'cpp_add_admin_menu');

function cpp_add_admin_menu() {
    add_menu_page(
        'Clone Posts for Polylang', // Tiêu đề trang
        'Clone Posts',              // Tiêu đề trong menu
        'manage_options',           // Quyền truy cập
        'cpp_clone_posts',          // Slug của trang
        'cpp_clone_posts_page',     // Callback function để hiển thị trang
        'dashicons-translation'     // Icon
    );
}

// Hàm lấy tất cả các ngôn ngữ
function get_all_languages_for_select() {
    global $wpdb;

    // Query để lấy tất cả các ngôn ngữ
    $query = "
        SELECT t.* 
        FROM {$wpdb->terms} t
        INNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id
        WHERE tt.taxonomy = 'language'
    ";

    $languages = $wpdb->get_results($query);

    if (!empty($languages)) {
        echo '<select name="language_select" id="language_select" required>';
        foreach ($languages as $language) {
            echo '<option value="' . esc_attr($language->slug) . '">' . esc_html($language->name) . '</option>';
        }
        echo '</select>';
    } else {
        echo 'No languages found.';
    }
}

// Hàm hiển thị trang quản lý trong Admin
function cpp_clone_posts_page() {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Kiểm tra nếu form có gửi dữ liệu clone posts
        if (isset($_POST['clone_posts'])) {
            // Kiểm tra xem có chọn post_type và language chưa
            if (isset($_POST['post_type']) && isset($_POST['language_select'])) {
                cpp_clone_posts($_POST['post_type'], $_POST['language_select']);
            } else {
                echo '<div class="error"><p>Please select both Post Type and Language.</p></div>';
            }
        }
        // Kiểm tra nếu form có gửi dữ liệu để xóa bài viết đã clone
        if (isset($_POST['delete_cloned_posts'])) {
            cpp_delete_cloned_posts();
        }
    }

    ?>
    <div class="wrap">
        <h1>Clone Posts for Polylang</h1>

        <form method="post">
            <h2>Select Post Type</h2>
            <select name="post_type" required>
                <?php
                // Lấy các post type công khai
                $post_types = get_post_types(array('public' => true), 'objects');
                foreach ($post_types as $post_type) {
                    echo '<option value="' . esc_attr($post_type->name) . '">' . esc_html($post_type->labels->singular_name) . '</option>';
                }
                ?>
            </select>

            <h2>Select Language</h2>
            <?php get_all_languages_for_select(); ?>
            <p><input type="submit" name="clone_posts" class="button button-primary" value="Clone Posts"></p>
        </form>

        <!-- Form xóa tất cả bài viết đã clone -->
        <form method="post">
            <p><input type="submit" name="delete_cloned_posts" class="button button-secondary" value="Delete All Cloned Posts"></p>
        </form>
    </div>
    <?php
}


// Hàm clone bài viết từ ngôn ngữ 'en' sang ngôn ngữ đã chọn
function cpp_clone_posts($post_type, $language) {
    // Lấy tất cả các bài viết trong post_type, ngôn ngữ 'en'
    $args = array(
        'post_type' => $post_type,
        'posts_per_page' => -1,  // Lấy tất cả bài viết
        'lang' => 'en',          // Chỉ lấy bài viết ngôn ngữ 'en'
    );
    $posts = get_posts($args);
    echo 'Number of posts found: ' . count($posts);

    $log = [];

    foreach ($posts as $post) {
        // Kiểm tra bài viết đã được tạo ở ngôn ngữ này chưa
        $existing_translation = pll_get_post($post->ID, $language);
        if ($existing_translation) {
            // Nếu bài viết đã tồn tại ở ngôn ngữ này thì bỏ qua (giữ bản dịch cũ)
            continue;
        }

        // Clone bài viết
        $new_post = array(
            'post_title'   => $post->post_title,
            'post_content' => $post->post_content,
            'post_type'    => $post_type,
            'post_status'  => 'publish',
            'post_author'  => $post->post_author,
        );

        // Tạo bài viết mới
        $new_post_id = wp_insert_post($new_post);

        // Gán ngôn ngữ cho bài viết mới
        pll_set_post_language($new_post_id, $language);  // Gán ngôn ngữ cho bài viết mới

        // Lấy tất cả các bản dịch của bài viết gốc (bao gồm bản dịch đã có và bản dịch mới)
        $translations = pll_get_post_translations($post->ID);

        // Thêm bài viết mới vào mối quan hệ dịch hiện có, nếu có
        $translations[$language] = $new_post_id;

        // Lưu mối quan hệ giữa các bài viết (bài viết gốc và bài viết dịch)
        pll_save_post_translations($translations);

        // Ghi vào log
        $log[] = $new_post_id;

        // Sao chép ACF (nếu có)
        if (function_exists('get_fields')) {
            $fields = get_fields($post->ID);
            if ($fields) {
                foreach ($fields as $key => $value) {
                    update_field($key, $value, $new_post_id);
                }
            }
        }

        // Sao chép Featured Image (nếu có)
        if (has_post_thumbnail($post->ID)) {
            $thumbnail_id = get_post_thumbnail_id($post->ID);
            set_post_thumbnail($new_post_id, $thumbnail_id);
        }
    }

    // Ghi log vào file
    if ($log) {
        $log_file = get_template_directory() . '/clone_log.txt'; // Sử dụng get_template_directory() để lấy đường dẫn đúng
        $log_message = "Cloned posts at " . date('Y-m-d H:i:s') . ":\n";
        foreach ($log as $post_id) {
            $log_message .= "Cloned Post ID: $post_id\n";
        }
        file_put_contents($log_file, $log_message, FILE_APPEND);
    }

    echo '<div class="updated"><p>Posts cloned successfully.</p></div>';
}

// Hàm xóa các bài viết đã clone
function cpp_delete_cloned_posts() {
    // Đọc file log để lấy ra ID của các bài viết đã clone
    $log_file = get_template_directory() . '/clone_log.txt'; // Lấy đường dẫn chính xác cho file log
    if (file_exists($log_file)) {
        $log_contents = file_get_contents($log_file);
        preg_match_all('/Cloned Post ID: (\d+)/', $log_contents, $matches);
        $post_ids = $matches[1];

        // Xóa các bài viết đã clone
        foreach ($post_ids as $post_id) {
            wp_delete_post($post_id, true); // Xóa bài viết vĩnh viễn
        }

        // Xóa log sau khi xóa bài viết
        file_put_contents($log_file, '');

        echo '<div class="updated"><p>Cloned posts deleted successfully.</p></div>';
    } else {
        echo '<div class="error"><p>No cloned posts found in the log.</p></div>';
    }
}

//File template filter
<?php
// Initialize arrays to hold years and months
$years_array = array();  // This will store unique years
$months_array = array(); // This will store months grouped by year

// Query all the events to retrieve the year and month data from 'event__date.form' and 'event__date.to'
$query = new WP_Query(array(
    'post_type' => 'events',  // Specify post type is 'events'
    'posts_per_page' => -1,   // Get all posts
    'fields' => 'ids',        // Only retrieve the IDs of the posts
));

if ($query->have_posts()) {
    while ($query->have_posts()) : $query->the_post();
        // Get the 'event__date' field that contains both start and end dates
        $event_date = get_field('event__date');
        // Extract 'form' (start date) and 'to' (end date)
        $date_from = isset($event_date['form']) ? DateTime::createFromFormat('d/m/Y', $event_date['form']) : null;
        $date_to = isset($event_date['to']) ? DateTime::createFromFormat('d/m/Y', $event_date['to']) : null;

        // If there's a start date, extract the year and month
        if ($date_from) {
            $year_from = $date_from->format('Y');  // Extract the year from start date
            $month_from = $date_from->format('n'); // Extract the month from start date
            $years_array[] = $year_from; // Add the year to the years array
            // Group months by year
            if (!isset($months_array[$year_from])) {
                $months_array[$year_from] = array();
            }
            if (!in_array($month_from, $months_array[$year_from])) {
                $months_array[$year_from][] = $month_from;  // Add the month if it's not already in the list
            }
        }

        // If there's an end date, extract the year and month
        if ($date_to) {
            $year_to = $date_to->format('Y');  // Extract the year from end date
            $month_to = $date_to->format('n'); // Extract the month from end date
            $years_array[] = $year_to;      // Add the year to the years array
            // Group months by year
            if (!isset($months_array[$year_to])) {
                $months_array[$year_to] = array();
            }
            if (!in_array($month_to, $months_array[$year_to])) {
                $months_array[$year_to][] = $month_to;  // Add the month if it's not already in the list
            }
        }
    endwhile;
    // Reset query
    wp_reset_postdata();
}

// Remove duplicate years and sort them in ascending order
$years_array = array_unique($years_array); // Remove duplicates
rsort($years_array);  // Sort the years in ascending order

$all_year = pll__('All Years');
$all_month = pll__('All Months');

?>

<div class="event__filter-form">
    <div class="filter__item year">
        <div class="value"><?= $all_year; ?></div>
        <div class="list year" style="display: none;">
            <ul id="year" class="list--item-filter">
                <li data-value="" class="selected">
                    <a href="javascript:void(0)" class="more-link">
                        <?= $all_year; ?>
                    </a>
                </li>
                <?php
                // Display all unique years in the dropdown
                foreach ($years_array as $year) {
                    echo '<li data-value="' . $year . '">' .
                    '<a href="javascript:void(0)" class="more-link">'. $year . '</a></li>';
                }
                ?>
            </ul>
        </div>
    </div>

    <div class="filter__item month">
        <div class="value"><?= $all_month; ?></div>
        <div class="list month" style="display: none;">
            <ul id="month" class="list--item-filter">
                <li data-value="" class="selected">
                    <a href="javascript:void(0)" class="more-link">
                        <?= $all_month; ?>
                    </a>
                </li>
                <?php

                // If no year is selected, display all months for all years
                $months = range(1, 12);  // All months from 1 to 12
                foreach ($months as $month) {
                    echo '<li data-value="' . $month . '">' .
                    '<a href="javascript:void(0)" class="more-link">'.date('F', mktime(0, 0, 0, $month, 1)) . '</a></li>';
                }
                ?>
            </ul>
        </div>
    </div>

</div>



//File item
<?php
    $ids = isset($args['ids']) ? $args['ids'] : null;

    if($ids):
        $location = get_field('event__location', $ids);
        $contact_persion = get_field('event__persion', $ids);

        $event_date = get_field('event__date', $ids);
        $date_from = isset($event_date['form']) ? $event_date['form'] : '';
        $date_to = isset($event_date['to']) ? $event_date['to'] : '';
        $date_calendar = '';
        if($date_from && $date_to) {
            $date_calendar = eventFormatDate($date_from).' - '.eventFormatDate($date_to);
        }

        if($date_from && !$date_to) {
            $date_calendar = eventFormatDate($date_from);
        }

        if(!$date_from && $date_to) {
            $date_calendar = eventFormatDate($date_to);
        }
?>
    <div class="card__item" data-aos="fade-up">
        <div class="card__item--wrapper">
            <div class="card__image">
                <?php if (get_the_post_thumbnail($ids, 'full')): ?>
                    <a href="<?= get_permalink($ids); ?>">
                        <?=  get_the_post_thumbnail($ids, 'full'); ?>
                    </a>
                <?php endif; ?>
            </div>
            <div class="card__title">
                <a href="<?= get_permalink($ids); ?>" class="title--text">
                    <?= get_the_title($ids); ?>
                </a>
            </div>
            <div class="card__info">
                <?php if($date_from || $date_to): ?>
                    <div class="event__info calendar">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21 10H3M16 2V6M8 2V6M7.8 22H16.2C17.8802 22 18.7202 22 19.362 21.673C19.9265 21.3854 20.3854 20.9265 20.673 20.362C21 19.7202 21 18.8802 21 17.2V8.8C21 7.11984 21 6.27976 20.673 5.63803C20.3854 5.07354 19.9265 4.6146 19.362 4.32698C18.7202 4 17.8802 4 16.2 4H7.8C6.11984 4 5.27976 4 4.63803 4.32698C4.07354 4.6146 3.6146 5.07354 3.32698 5.63803C3 6.27976 3 7.11984 3 8.8V17.2C3 18.8802 3 19.7202 3.32698 20.362C3.6146 20.9265 4.07354 21.3854 4.63803 21.673C5.27976 22 6.11984 22 7.8 22Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <div class="text">
                            <?= $date_calendar; ?>
                        </div>
                    </div>
                <?php endif; ?>
                <?php if($location): ?>
                    <div class="event__info location">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12 22C16 18 20 14.4183 20 10C20 5.58172 16.4183 2 12 2C7.58172 2 4 5.58172 4 10C4 14.4183 8 18 12 22Z" stroke="#2957A4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <a href="<?= $location['url']; ?>" class="text" target="<?= $location['target'] ?>">
                            <?= $location['title']; ?>
                        </a>
                    </div>
                <?php endif; ?>
                <?php if($contact_persion): 
                    foreach($contact_persion as $persion):
                    ?>
                        <div class="event__info contact">
                            <svg width="20" height="22" viewBox="0 0 20 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M13.7 10.7172C14.6839 9.94783 15.4031 8.89061 15.7575 7.69296C16.1118 6.49531 16.0836 5.21693 15.6767 4.03609C15.2698 2.85526 14.5046 1.83083 13.4877 1.10566C12.4708 0.380484 11.253 -0.00927734 10.004 -0.00927734C8.75503 -0.00927734 7.53719 0.380484 6.52031 1.10566C5.50342 1.83083 4.73819 2.85526 4.33131 4.03609C3.92443 5.21693 3.89619 6.49531 4.25053 7.69296C4.60487 8.89061 5.32413 9.94783 6.308 10.7172C4.44917 11.4568 2.85467 12.7365 1.73027 14.3912C0.605868 16.0459 0.00318499 17.9996 0 20.0002V21.0002C0 21.2654 0.105357 21.5198 0.292893 21.7073C0.48043 21.8948 0.734784 22.0002 1 22.0002H19C19.2652 22.0002 19.5196 21.8948 19.7071 21.7073C19.8946 21.5198 20 21.2654 20 21.0002V20.0002C19.9975 18.0006 19.3959 16.0475 18.273 14.3929C17.1501 12.7383 15.5573 11.4581 13.7 10.7172ZM6 6.0002C6 5.20907 6.2346 4.43572 6.67412 3.77792C7.11365 3.12012 7.73836 2.60743 8.46927 2.30468C9.20017 2.00193 10.0044 1.92272 10.7804 2.07706C11.5563 2.2314 12.269 2.61236 12.8284 3.17177C13.3878 3.73118 13.7688 4.44391 13.9231 5.21984C14.0775 5.99576 13.9983 6.80003 13.6955 7.53093C13.3928 8.26184 12.8801 8.88655 12.2223 9.32608C11.5645 9.7656 10.7911 10.0002 10 10.0002C8.93913 10.0002 7.92172 9.57877 7.17157 8.82863C6.42143 8.07848 6 7.06107 6 6.0002ZM2 20.0002C2 17.8785 2.84285 15.8436 4.34315 14.3433C5.84344 12.8431 7.87827 12.0002 10 12.0002C12.1217 12.0002 14.1566 12.8431 15.6569 14.3433C17.1571 15.8436 18 17.8785 18 20.0002H2Z" fill="#2957A4"/>
                            </svg>
                            <a href="<?= $persion['email'] ? 'mailto:'.$persion['email'] : 'javascript:void(0)' ?>" class="text">
                                <?= $persion['name']; ?>
                            </a>
                        </div>
                <?php
                    endforeach;
                endif; ?>
            </div>
        </div>
</div>
<?php endif; ?>



// Template event
<?php
/**
 * Template Name: Events
 * Description: Page template for events
 */
get_header();
// Get the current language using Polylang
$current_language = pll_current_language();

// Define the ACF field name based on the current language
$field_name = 'event__settings_' . $current_language;

// Retrieve the ACF field value
$event_settings = get_field($field_name, 'options');

$event_ids = filter_events_by_empty();  // Filter events by year and month
$total = count($event_ids);
$message = sprintf(
    pll__( 'Showing %d result' ),
    $total
);
?>
<div class="event__banner">
    <div class="container">
        <h1 class="event__heading" data-aos="fade-up"><?= get_the_title(); ?></h1>
    </div>
    <?php
        $featured_image = null;
        if (has_post_thumbnail()) {
            // Get the featured image for the current page
            $featured_image = get_the_post_thumbnail(get_the_ID(), 'full'); // 'full' can be replaced with other sizes like
        }
        if($featured_image): ?>
            <div class="image" data-aos="fade-up">
                <?= $featured_image; ?>
            </div>
        <?php endif; ?>
</div>

<div class="events__list--box">
    <div class="container">
        <div class="event__filter-top" data-aos="fade-up">
            <?php
                // Display the paginated posts
                get_template_part('template-parts/events/filter');  // Include the filter form
            ?>
            <?php
                if ($event_settings && isset($event_settings['event_schedule'])) {
                    $event_schedule = $event_settings['event_schedule'];  // Event schedule link
            ?>
                    <div class="event__schedule">
                        <a href="<?=  esc_url($event_schedule['url']); ?>" target="<?=  $event_schedule['target']; ?>" class="schedule"><?=  $event_schedule['title']; ?></a>
                    </div>
            <?php
                }
            ?>
        </div>
        <div class="events__list--wrapper">
            <div class="event__list--total" data-aos="fade-up">
                <?= $message ?>
            </div>
            <div class="events__list--event">
                <?php
                    $event_posts_query = get_filtered_posts_with_pagination($event_ids, 1);

                    display_filtered_events($event_posts_query);

                    display_pagination($event_posts_query, 1);
                ?>
            </div>
        </div>
    </div>
</div>
<?php get_footer(); ?>


//jQuery
jQuery(document).ready(function($) {
    // When clicking anywhere outside the filter form
    $(document).click(function(event) {
        // Check if the click is outside the filter form
        if (!$(event.target).closest('.event__filter-form').length) {
            // Close any open filter lists and remove the active class
            $('.event__filter-form .filter__item').removeClass('active');
            $('.event__filter-form .filter__item .list').slideUp();
        }
    });

    $('.event__filter-form .filter__item .value').click(function(e) {
        e.stopPropagation();

        // Check if the clicked item is already active
        var $parentItem = $(this).parent();

        if ($parentItem.hasClass('active')) {
            // If it's already active, remove the active class and slide up the list
            $parentItem.removeClass('active');
            $(this).next().slideUp();
        } else {
            // If it's not active, toggle the active class and slide down the list
            $('.event__filter-form .filter__item').removeClass('active');
            $('.event__filter-form .filter__item .list').slideUp();
            $parentItem.addClass('active');
            $(this).next().slideDown();
        }
    });

    // On form submit
    $('.list--item-filter li').click(function(e){
        e.stopPropagation();

        // Get the selected year, month, and reset the page number to 1
        $(this).parent().find('li').removeClass('selected');
        $(this).addClass('selected');

        //Set Value
        var year = $('#year li.selected').data('value');
        var month = $('#month li.selected').data('value');
        var paged = 1; // Always start with page 1 when a new filter is applied

        // Change text
        $(this).parents('.filter__item').find('.value').html($(this).find('a').text());
        $('.event__filter-form .filter__item').removeClass('active');
        $('.event__filter-form .filter__item .list').slideUp();

        // Prepare the AJAX request
        $.ajax({
            url: ajax_params.ajax_url,  // Use the localized `ajaxurl`
            type: 'GET',
            data: {
                action: 'filter_events', // AJAX action hook
                year: year,
                month: month,
                paged: paged  // Always pass 1 when submitting the filter form
            },
            beforeSend: function() {
            },
            success: function(response) {
                if (response.success) {
                    //Update total
                    $('.event__list--total').html(response.data.total);

                    // Update the events list
                    $('.events__list--event').html(response.data.events_content)

                    // Update the pagination links
                    if(response.data.pagination_content) {
                        $('.events__list--event').append(response.data.pagination_content);
                    }
                }
            }
        });
    });

    // On pagination click (both "Next" and "Previous" buttons)
    $(document).on('click', '.event__pagination a', function(e){
        e.preventDefault(); // Prevent the default action

        //Set Value
        var year = $('#year li.selected').data('value');
        var month = $('#month li.selected').data('value');
        var paged = $(this).data('page');

        // Prepare the AJAX request
        $.ajax({
            url: ajax_params.ajax_url,  // Use the localized `ajaxurl`
            type: 'GET',
            data: {
                action: 'filter_events', // AJAX action hook
                year: year,
                month: month,
                paged: paged  // Pass the selected page number
            },
            beforeSend: function() {
            },
            success: function(response) {
                if (response.success) {
                    //Update total
                    $('.event__list--total').html(response.data.total);

                    // Update the events list
                    $('.events__list--event').html(response.data.events_content)

                    // Update the pagination links
                    if(response.data.pagination_content) {
                        $('.events__list--event').append(response.data.pagination_content);
                    }
                }
            }
        });
    });
});

